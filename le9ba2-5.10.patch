From da75ce205f95d7f2430031973e016ac944f15938 Mon Sep 17 00:00:00 2001
From: Alexey Avramov <hakavlad@gmail.com>
Date: Sun, 14 Feb 2021 04:56:16 +0900
Subject: [PATCH] Protect file pages under memory pressure

The patch provides sysctl knobs to control file pages eviction
in low memory conditions.

vm.file_min_kbytes provides hard memory protection. File pages
should not be evicted under memory pressure if their volume is
below this (even with no free swap space).
The default value is 200000.

vm.file_low_kbytes provides soft memory protection. File pages
should not be evicted under memory pressure if their volume is
below this and free swap space is available.
The default value is 0.
---
 include/linux/mm.h |  5 +++++
 kernel/sysctl.c    | 29 +++++++++++++++++++++++++++++
 mm/Kconfig         | 14 ++++++++++++++
 mm/vmscan.c        | 24 ++++++++++++++++++++++++
 4 files changed, 72 insertions(+)

diff --git a/include/linux/mm.h b/include/linux/mm.h
index db6ae4d3f..63f78fc9a 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -205,6 +205,11 @@ extern int sysctl_max_map_count;
 extern unsigned long sysctl_user_reserve_kbytes;
 extern unsigned long sysctl_admin_reserve_kbytes;
 
+#if defined(CONFIG_PROTECT_FILE)
+extern unsigned long sysctl_file_low_kbytes;
+extern unsigned long sysctl_file_min_kbytes;
+#endif
+
 extern int sysctl_overcommit_memory;
 extern int sysctl_overcommit_ratio;
 extern unsigned long sysctl_overcommit_kbytes;
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index afad08596..4261e5808 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -111,6 +111,19 @@
 static int sixty = 60;
 #endif
 
+#if defined(CONFIG_PROTECT_FILE)
+#if CONFIG_PROTECT_FILE_LOW_KBYTES < 0
+#error "CONFIG_PROTECT_FILE_LOW_KBYTES should be >= 0"
+#endif
+#if CONFIG_PROTECT_FILE_MIN_KBYTES < 0
+#error "CONFIG_PROTECT_FILE_MIN_KBYTES should be >= 0"
+#endif
+unsigned long sysctl_file_low_kbytes __read_mostly =
+	CONFIG_PROTECT_FILE_LOW_KBYTES;
+unsigned long sysctl_file_min_kbytes __read_mostly =
+	CONFIG_PROTECT_FILE_MIN_KBYTES;
+#endif
+
 static int __maybe_unused neg_one = -1;
 static int __maybe_unused two = 2;
 static int __maybe_unused four = 4;
@@ -3082,6 +3095,22 @@ static struct ctl_table vm_table[] = {
 		.extra2		= SYSCTL_ONE,
 	},
 #endif
+#if defined(CONFIG_PROTECT_FILE)
+	{
+		.procname	= "file_low_kbytes",
+		.data		= &sysctl_file_low_kbytes,
+		.maxlen		= sizeof(sysctl_file_low_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "file_min_kbytes",
+		.data		= &sysctl_file_min_kbytes,
+		.maxlen		= sizeof(sysctl_file_min_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+#endif
 	{
 		.procname	= "user_reserve_kbytes",
 		.data		= &sysctl_user_reserve_kbytes,
diff --git a/mm/Kconfig b/mm/Kconfig
index 390165ffb..aa67d55b4 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -63,6 +63,20 @@ config SPARSEMEM_MANUAL
 
 endchoice
 
+config PROTECT_FILE
+	def_bool y
+	depends on SYSCTL
+
+config PROTECT_FILE_LOW_KBYTES
+	int "Default value for vm.file_low_kbytes"
+	depends on PROTECT_FILE
+	default "0"
+
+config PROTECT_FILE_MIN_KBYTES
+	int "Default value for vm.file_min_kbytes"
+	depends on PROTECT_FILE
+	default "200000"
+
 config DISCONTIGMEM
 	def_bool y
 	depends on (!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE) || DISCONTIGMEM_MANUAL
diff --git a/mm/vmscan.c b/mm/vmscan.c
index 7b4e31eac..1fbff14cc 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -120,6 +120,11 @@ struct scan_control {
 	/* The file pages on the current node are dangerously low */
 	unsigned int file_is_tiny:1;
 
+#if defined(CONFIG_PROTECT_FILE)
+	unsigned int file_is_low:1;
+	unsigned int file_is_min:1;
+#endif
+
 	/* Allocation order */
 	s8 order;
 
@@ -2274,6 +2279,13 @@ static void get_scan_count(struct lruvec *lruvec, struct scan_control *sc,
 		goto out;
 	}
 
+#if defined(CONFIG_PROTECT_FILE)
+	if (sc->file_is_low || sc->file_is_min) {
+		scan_balance = SCAN_ANON;
+		goto out;
+	}
+#endif
+
 	/*
 	 * If the system is almost out of file pages, force-scan anon.
 	 */
@@ -2418,6 +2430,11 @@ static void get_scan_count(struct lruvec *lruvec, struct scan_control *sc,
 			BUG();
 		}
 
+#if defined(CONFIG_PROTECT_FILE)
+		if (file && sc->file_is_min)
+			scan = 0;
+#endif
+
 		nr[lru] = scan;
 	}
 }
@@ -2766,6 +2783,13 @@ static void shrink_node(pg_data_t *pgdat, struct scan_control *sc)
 			file + free <= total_high_wmark &&
 			!(sc->may_deactivate & DEACTIVATE_ANON) &&
 			anon >> sc->priority;
+
+#if defined(CONFIG_PROTECT_FILE)
+		file <<= (PAGE_SHIFT - 10);
+		sc->file_is_low = file <= sysctl_file_low_kbytes;
+		sc->file_is_min = file <= sysctl_file_min_kbytes;
+#endif
+
 	}
 
 	shrink_node_memcgs(pgdat, sc);
-- 
2.11.0

