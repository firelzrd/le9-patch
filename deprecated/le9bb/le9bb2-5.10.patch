From db1f3db7973fc19f62c48338a6f4c7774bd8deb8 Mon Sep 17 00:00:00 2001
From: Alexey Avramov <hakavlad@gmail.com>
Date: Mon, 22 Feb 2021 08:37:21 +0900
Subject: [PATCH] Protect file pages under memory pressure

The patch provides sysctl knobs for protecting file pages during low
memory conditions.

Protection of file pages may be used to prevent thrashing and reducing
I/O under memory pressure. Hard protection of file pages may be used
to avoid high latency and prevent livelock in near-OOM conditions.

The vm.file_low_kbytes sysctl knob provides *best-effort* protection
of file pages. The file pages on the current node won't be reclaimed
uder memory pressure when their volume is below vm.file_low_kbytes
*unless* we threaten to OOM or have no swap space or vm.swappiness=0.
The default value is 0.

The vm.file_min_kbytes sysctl knob provides *hard* protection of
file pages. The file pages on the current node won't be reclaimed
under memory pressure when their volume is below vm.file_min_kbytes.
The default value is 200000.
---
 Documentation/admin-guide/sysctl/vm.rst | 31 ++++++++++++++++++++++++
 include/linux/mm.h                      |  5 ++++
 kernel/sysctl.c                         | 29 +++++++++++++++++++++++
 mm/Kconfig                              | 34 ++++++++++++++++++++++++++
 mm/vmscan.c                             | 42 +++++++++++++++++++++++++++++++++
 5 files changed, 141 insertions(+)

diff --git a/Documentation/admin-guide/sysctl/vm.rst b/Documentation/admin-guide/sysctl/vm.rst
index f455fa00c..c839e1658 100644
--- a/Documentation/admin-guide/sysctl/vm.rst
+++ b/Documentation/admin-guide/sysctl/vm.rst
@@ -38,6 +38,8 @@ Currently, these files are in /proc/sys/vm:
 - dirty_writeback_centisecs
 - drop_caches
 - extfrag_threshold
+- file_low_kbytes
+- file_min_kbytes
 - highmem_is_dirtyable
 - hugetlb_shm_group
 - laptop_mode
@@ -287,6 +289,35 @@ The kernel will not compact memory in a zone if the
 fragmentation index is <= extfrag_threshold. The default value is 500.
 
 
+file_low_kbytes
+===============
+
+Available only when CONFIG_PROTECT_FILE is set. This knob provides
+*best-effort* protection of file pages. The file pages on the current
+node won't be reclaimed uder memory pressure when their volume is below
+vm.file_low_kbytes *unless* we threaten to OOM or have no swap space
+or vm.swappiness=0.
+
+Protection of file pages may be used to prevent thrashing and
+reducing I/O under low memory conditions.
+
+The default value is 0.
+
+
+file_min_kbytes
+===============
+
+Available only when CONFIG_PROTECT_FILE is set. This knob provides
+*hard* protection of file pages. The file pages on the current node
+won't be reclaimed under memory pressure when their volume is below
+vm.file_min_kbytes.
+
+Hard protection of file pages may be used to avoid high latency and
+prevent livelock in near-OOM conditions.
+
+The default value is 200000.
+
+
 highmem_is_dirtyable
 ====================
 
diff --git a/include/linux/mm.h b/include/linux/mm.h
index db6ae4d3f..63f78fc9a 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -205,6 +205,11 @@ extern int sysctl_max_map_count;
 extern unsigned long sysctl_user_reserve_kbytes;
 extern unsigned long sysctl_admin_reserve_kbytes;
 
+#if defined(CONFIG_PROTECT_FILE)
+extern unsigned long sysctl_file_low_kbytes;
+extern unsigned long sysctl_file_min_kbytes;
+#endif
+
 extern int sysctl_overcommit_memory;
 extern int sysctl_overcommit_ratio;
 extern unsigned long sysctl_overcommit_kbytes;
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index afad08596..4261e5808 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -111,6 +111,19 @@
 static int sixty = 60;
 #endif
 
+#if defined(CONFIG_PROTECT_FILE)
+#if CONFIG_PROTECT_FILE_LOW_KBYTES < 0
+#error "CONFIG_PROTECT_FILE_LOW_KBYTES should be >= 0"
+#endif
+#if CONFIG_PROTECT_FILE_MIN_KBYTES < 0
+#error "CONFIG_PROTECT_FILE_MIN_KBYTES should be >= 0"
+#endif
+unsigned long sysctl_file_low_kbytes __read_mostly =
+	CONFIG_PROTECT_FILE_LOW_KBYTES;
+unsigned long sysctl_file_min_kbytes __read_mostly =
+	CONFIG_PROTECT_FILE_MIN_KBYTES;
+#endif
+
 static int __maybe_unused neg_one = -1;
 static int __maybe_unused two = 2;
 static int __maybe_unused four = 4;
@@ -3082,6 +3095,22 @@ static struct ctl_table vm_table[] = {
 		.extra2		= SYSCTL_ONE,
 	},
 #endif
+#if defined(CONFIG_PROTECT_FILE)
+	{
+		.procname	= "file_low_kbytes",
+		.data		= &sysctl_file_low_kbytes,
+		.maxlen		= sizeof(sysctl_file_low_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "file_min_kbytes",
+		.data		= &sysctl_file_min_kbytes,
+		.maxlen		= sizeof(sysctl_file_min_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+#endif
 	{
 		.procname	= "user_reserve_kbytes",
 		.data		= &sysctl_user_reserve_kbytes,
diff --git a/mm/Kconfig b/mm/Kconfig
index 390165ffb..935014966 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -63,6 +63,40 @@ config SPARSEMEM_MANUAL
 
 endchoice
 
+config PROTECT_FILE
+	bool "Add sysctl knobs for protecting file pages under low memory"
+	depends on SYSCTL
+	default y
+	help
+	  Protection of file pages may be used to prevent thrashing
+	  and reduce I/O under memory pressure. Hard protection of file pages
+	  may be used to avoid high latency and prevent livelock in near-OOM
+	  conditions.
+	  
+	  This option provides two sysctl knobs for protecting file pages
+	  under memory pressure.
+
+config PROTECT_FILE_LOW_KBYTES
+	int "Default value for vm.file_low_kbytes"
+	depends on PROTECT_FILE
+	default "0"
+	help
+	  The vm.file_low_kbytes sysctl knob provides *best-effort*
+	  protection of file pages. The file pages on the current node
+	  won't be reclaimed uder memory pressure when their volume is
+	  below vm.file_low_kbytes *unless* we threaten to OOM or have
+	  no swap space or vm.swappiness=0.
+
+config PROTECT_FILE_MIN_KBYTES
+	int "Default value for vm.file_min_kbytes"
+	depends on PROTECT_FILE
+	default "200000"
+	help
+	  The vm.file_min_kbytes sysctl knob provides *hard* protection
+	  of file pages. The file pages on the current node won't be
+	  reclaimed under memory pressure when their volume is below
+	  vm.file_min_kbytes.
+
 config DISCONTIGMEM
 	def_bool y
 	depends on (!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE) || DISCONTIGMEM_MANUAL
diff --git a/mm/vmscan.c b/mm/vmscan.c
index 7b4e31eac..8183d0ee3 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -120,6 +120,21 @@ struct scan_control {
 	/* The file pages on the current node are dangerously low */
 	unsigned int file_is_tiny:1;
 
+#if defined(CONFIG_PROTECT_FILE)
+	/*
+	 * The file pages on the current node won't be reclaimed when
+	 * their volume is below vm.file_low_kbytes *unless* we threaten
+	 * to OOM or have no swap space or vm.swappiness=0.
+	 */
+	unsigned int file_is_low:1;
+
+	/*
+	 * The file pages on the current node won't be reclaimed when
+	 * their volume is below vm.file_min_kbytes.
+	 */
+	unsigned int file_is_min:1;
+#endif
+
 	/* Allocation order */
 	s8 order;
 
@@ -2282,6 +2297,18 @@ static void get_scan_count(struct lruvec *lruvec, struct scan_control *sc,
 		goto out;
 	}
 
+#if defined(CONFIG_PROTECT_FILE)
+	/*
+	 * Force-scan anon if file pages is under vm.file_min_kbytes
+	 * or vm.file_low_kbytes (unless the swappiness setting
+	 * disagrees with swapping).
+	 */
+	if ((sc->file_is_low || sc->file_is_min) && swappiness) {
+		scan_balance = SCAN_ANON;
+		goto out;
+	}
+#endif
+
 	/*
 	 * If there is enough inactive page cache, we do not reclaim
 	 * anything from the anonymous working right now.
@@ -2418,6 +2445,15 @@ static void get_scan_count(struct lruvec *lruvec, struct scan_control *sc,
 			BUG();
 		}
 
+#if defined(CONFIG_PROTECT_FILE)
+		/*
+		 * Don't reclaim file pages when their volume is below
+		 * vm.file_min_kbytes.
+		 */
+		if (file && sc->file_is_min)
+			scan = 0;
+#endif
+
 		nr[lru] = scan;
 	}
 }
@@ -2766,6 +2802,12 @@ static void shrink_node(pg_data_t *pgdat, struct scan_control *sc)
 			file + free <= total_high_wmark &&
 			!(sc->may_deactivate & DEACTIVATE_ANON) &&
 			anon >> sc->priority;
+
+#if defined(CONFIG_PROTECT_FILE)
+		file <<= (PAGE_SHIFT - 10);
+		sc->file_is_low = file <= sysctl_file_low_kbytes;
+		sc->file_is_min = file <= sysctl_file_min_kbytes;
+#endif
 	}
 
 	shrink_node_memcgs(pgdat, sc);
-- 
2.11.0

