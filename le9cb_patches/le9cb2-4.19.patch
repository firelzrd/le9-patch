From c47f612c8ba8633e5390de8959eee4c86e5c8080 Mon Sep 17 00:00:00 2001
From: Alexey Avramov <hakavlad@gmail.com>
Date: Mon, 29 Mar 2021 02:52:56 +0900
Subject: [PATCH] mm: Protect clean file pages under memory pressure

The patch provides sysctl knobs for protecting clean file pages
during low-memory conditions.

Protection of clean file pages may be used to prevent thrashing and
reducing I/O under memory pressure. Hard protection of clean file
pages may be used to avoid high latency and prevent livelock in
near-OOM conditions.

The vm.clean_file_low_kbytes sysctl knob provides *best-effort*
protection of clean file pages. The clean file pages on the current
node won't be reclaimed uder memory pressure when their volume is
below vm.clean_file_low_kbytes *unless* we threaten to OOM or have
no swap space or vm.swappiness=0.
The default value is 250000.

The vm.clean_file_min_kbytes sysctl knob provides *hard* protection
of clean file pages. The clean file pages on the current node won't
be reclaimed under memory pressure when their volume is below
vm.file_min_kbytes.
The default value is 200000.

Signed-off-by: Alexey Avramov <hakavlad@gmail.com>
---
 Documentation/sysctl/vm.txt | 31 +++++++++++++++++++++++++++++++
 include/linux/mm.h          |  5 +++++
 kernel/sysctl.c             | 29 +++++++++++++++++++++++++++++
 mm/Kconfig                  | 34 ++++++++++++++++++++++++++++++++++
 mm/vmscan.c                 | 35 +++++++++++++++++++++++++++++++++++
 5 files changed, 134 insertions(+)

diff --git a/Documentation/sysctl/vm.txt b/Documentation/sysctl/vm.txt
index 7d73882e2..7e8b6b3f0 100644
--- a/Documentation/sysctl/vm.txt
+++ b/Documentation/sysctl/vm.txt
@@ -20,6 +20,8 @@ Currently, these files are in /proc/sys/vm:

 - admin_reserve_kbytes
 - block_dump
+- clean_file_low_kbytes
+- clean_file_min_kbytes
 - compact_memory
 - compact_unevictable_allowed
 - dirty_background_bytes
@@ -104,6 +106,35 @@ information on block I/O debugging is in Documentation/laptops/laptop-mode.txt.

 ==============================================================

+clean_file_low_kbytes
+
+Available only when CONFIG_PROTECT_CLEAN_FILE is set. This knob provides
+*best-effort* protection of clean file pages. The clean file pages on the
+current node won't be reclaimed uder memory pressure when their volume is
+below vm.clean_file_low_kbytes *unless* we threaten to OOM or have no swap
+space or vm.swappiness=0.
+
+Protection of clean file pages may be used to prevent thrashing and
+reducing I/O under low-memory conditions.
+
+The default value is 250000.
+
+==============================================================
+
+clean_file_min_kbytes
+
+Available only when CONFIG_PROTECT_CLEAN_FILE is set. This knob provides
+*hard* protection of clean file pages. The clean file pages on the current
+node won't be reclaimed under memory pressure when their volume is below
+vm.clean_file_min_kbytes.
+
+Hard protection of clean file pages may be used to avoid high latency and
+prevent livelock in near-OOM conditions.
+
+The default value is 200000.
+
+==============================================================
+
 compact_memory

 Available only when CONFIG_COMPACTION is set. When 1 is written to the file,
diff --git a/include/linux/mm.h b/include/linux/mm.h
index 0416a7204..be4b0b649 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -129,6 +129,11 @@ extern int sysctl_max_map_count;
 extern unsigned long sysctl_user_reserve_kbytes;
 extern unsigned long sysctl_admin_reserve_kbytes;

+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+extern unsigned long sysctl_clean_file_low_kbytes;
+extern unsigned long sysctl_clean_file_min_kbytes;
+#endif
+
 extern int sysctl_overcommit_memory;
 extern int sysctl_overcommit_ratio;
 extern unsigned long sysctl_overcommit_kbytes;
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index cc02050fd..d13836c42 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -119,6 +119,19 @@ extern int sysctl_nr_trim_pages;
 static int sixty = 60;
 #endif

+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+#if CONFIG_PROTECT_CLEAN_FILE_LOW_KBYTES < 0
+#error "CONFIG_PROTECT_CLEAN_FILE_LOW_KBYTES should be >= 0"
+#endif
+#if CONFIG_PROTECT_CLEAN_FILE_MIN_KBYTES < 0
+#error "CONFIG_PROTECT_CLEAN_FILE_MIN_KBYTES should be >= 0"
+#endif
+unsigned long sysctl_clean_file_low_kbytes __read_mostly =
+	CONFIG_PROTECT_CLEAN_FILE_LOW_KBYTES;
+unsigned long sysctl_clean_file_min_kbytes __read_mostly =
+	CONFIG_PROTECT_CLEAN_FILE_MIN_KBYTES;
+#endif
+
 static int __maybe_unused neg_one = -1;

 static int zero;
@@ -1628,6 +1641,22 @@ static struct ctl_table vm_table[] = {
 		.extra2		= &one,
 	},
 #endif
+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+	{
+		.procname	= "clean_file_low_kbytes",
+		.data		= &sysctl_clean_file_low_kbytes,
+		.maxlen		= sizeof(sysctl_clean_file_low_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "clean_file_min_kbytes",
+		.data		= &sysctl_clean_file_min_kbytes,
+		.maxlen		= sizeof(sysctl_clean_file_min_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+#endif
 	{
 		.procname	= "user_reserve_kbytes",
 		.data		= &sysctl_user_reserve_kbytes,
diff --git a/mm/Kconfig b/mm/Kconfig
index de64ea658..a198fe2b0 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -64,6 +64,40 @@ config SPARSEMEM_MANUAL

 endchoice

+config PROTECT_CLEAN_FILE
+	bool "Add sysctl knobs for protecting clean file pages under low memory"
+	depends on SYSCTL
+	default y
+	help
+	  Protection of clean file pages may be used to prevent thrashing
+	  and reduce I/O under memory pressure. Hard protection of clean file
+	  pages may be used to avoid high latency and prevent livelock in
+	  near-OOM conditions.
+
+	  This option provides two sysctl knobs for protecting clean file pages
+	  under memory pressure.
+
+config PROTECT_CLEAN_FILE_LOW_KBYTES
+	int "Default value for vm.clean_file_low_kbytes"
+	depends on PROTECT_CLEAN_FILE
+	default "250000"
+	help
+	  The vm.clean_file_low_kbytes sysctl knob provides *best-effort*
+	  protection of clean file pages. The clean file pages on the current
+	  node won't be reclaimed uder memory pressure when their volume is
+	  below vm.clean_file_low_kbytes *unless* we threaten to OOM or have
+	  no swap space or vm.swappiness=0.
+
+config PROTECT_CLEAN_FILE_MIN_KBYTES
+	int "Default value for vm.clean_file_min_kbytes"
+	depends on PROTECT_CLEAN_FILE
+	default "200000"
+	help
+	  The vm.clean_file_min_kbytes sysctl knob provides *hard* protection
+	  of clean file pages. The clean file pages on the current node won't be
+	  reclaimed under memory pressure when their volume is below
+	  vm.clean_file_min_kbytes.
+
 config DISCONTIGMEM
 	def_bool y
 	depends on (!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE) || DISCONTIGMEM_MANUAL
diff --git a/mm/vmscan.c b/mm/vmscan.c
index c5ef7240c..070aedd53 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -2294,6 +2294,20 @@ static void get_scan_count(struct lruvec *lruvec, struct mem_cgroup *memcg,
 	unsigned long anon, file;
 	unsigned long ap, fp;
 	enum lru_list lru;
+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+	unsigned long node_file, node_dirty, node_clean;
+	bool clean_file_below_low, clean_file_below_min;
+
+	node_dirty = node_page_state(pgdat, NR_FILE_DIRTY);
+	node_file = node_page_state(pgdat, NR_ACTIVE_FILE) +
+		node_page_state(pgdat, NR_INACTIVE_FILE);
+
+	if (node_file > node_dirty)
+		node_clean = (node_file - node_dirty) << (PAGE_SHIFT - 10);
+
+	clean_file_below_low = node_clean <= sysctl_clean_file_low_kbytes;
+	clean_file_below_min = node_clean <= sysctl_clean_file_min_kbytes;
+#endif

 	/* If we have no swap space, do not bother scanning anon pages. */
 	if (!sc->may_swap || mem_cgroup_get_nr_swap_pages(memcg) <= 0) {
@@ -2365,6 +2379,18 @@ static void get_scan_count(struct lruvec *lruvec, struct mem_cgroup *memcg,
 		}
 	}

+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+	/*
+	 * Force-scan anon if clean file pages is under vm.clean_file_min_kbytes
+	 * or vm.clean_file_low_kbytes (unless the swappiness setting
+	 * disagrees with swapping).
+	 */
+	if ((clean_file_below_low || clean_file_below_min) && swappiness) {
+		scan_balance = SCAN_ANON;
+		goto out;
+	}
+#endif
+
 	/*
 	 * If there is enough inactive page cache, i.e. if the size of the
 	 * inactive list is greater than that of the active list *and* the
@@ -2473,6 +2499,15 @@ static void get_scan_count(struct lruvec *lruvec, struct mem_cgroup *memcg,
 			BUG();
 		}

+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+		/*
+		 * Don't reclaim clean file pages when their volume is below
+		 * vm.clean_file_min_kbytes.
+		 */
+		if (file && clean_file_below_min)
+			scan = 0;
+#endif
+
 		*lru_pages += size;
 		nr[lru] = scan;
 	}
--
2.11.0

